{
    "contents" : "### Prediction the game record and model building\n## load the package\nsource(\"~/Documents/Sport_analysis/basketball/NBA_Prediction_Analysis//Setting_Packages.R\")\nsource(\"~/Documents/Sport_analysis/basketball/NBA_Prediction_Analysis//Setting_Advanced_Statistic.R\")\nsource(\"~/Documents/Sport_analysis/basketball/NBA_Prediction_Analysis//Setting_Normalize.R\")\nsource(\"~/Documents/Sport_analysis/basketball/NBA_Prediction_Analysis//Setting_Predict_Data.R\")\nSys.setlocale(\"LC_TIME\", \"C\") # convert OS LC_NUMERIC = C for analysis data form \n\n### Season Schedule\nif(format(Sys.time(), \"%Y %m\")<paste(as.numeric(format(Sys.time(), \"%Y\")), \"11\") &\n     format(Sys.time(), \"%Y %m\")>paste(as.numeric(format(Sys.time(), \"%Y\")), \"05\") ){\n  SeasonCurrent <- as.numeric(format(Sys.time(), \"%Y\"))-1\n}else{\n  SeasonCurrent <- as.numeric(format(Sys.time(), \"%Y\"))\n}\nScheduleFile <- sprintf(\"~/Documents/Sport_analysis/basketball//Season_Data//Season_%s.txt\", SeasonCurrent)\nSchedule <- read.table(ScheduleFile, header=TRUE,  sep=\"\\t\", as.is=TRUE)\nSchedule <- na.omit(Schedule)\n## function for convert date\nconvert.date.type<- function(DateVector) {\n  datetime <- str_extract(DateVector, \"[[:alpha:]]+.[0-9]+[[:punct:]].[0-9]+$\")\n  datetime <- str_replace(datetime , \",\", \"\")\n  datetime <- unlist(strsplit(datetime, \" \"))\n  datetime <- str_replace_all(paste(datetime[3], datetime[1], datetime[2]), \" \", \"\")\n  datetime <- as.character(as.Date(datetime, \"%Y %b %d\"))\n  return(datetime)\n}\n## call convert.date.type function\nSchedule$CovertDate <- unlist(lapply(Schedule$Date, convert.date.type))\n\n### For game prediction object programs\n#loaction.date <- Sys.Date()-1 \n#today.schedule.idx <- suppressWarnings(which(Schedule$CovertDate == loaction.date))\n#Today.Game.Schedule <- Schedule[today.schedule.idx, ]\n\n### NBATeamName\nNBATeamName <- read.xlsx2(\"~/Documents/Sport_analysis/basketball//Team_Data//NBA_Team_Name.xlsx\", \n                           sheetIndex = as.character(SeasonCurrent), header = TRUE)\nNBATeamName <- data.table(NBATeamName)\nRecordGameInfo <- data.table() # record all pred and real data\n\n### Team Data extract\n#folder=\"C://Users//user//Documents//My Dropbox//NBA_Code//NBA_Data//Team_Data\"\n#file_document=dir(folder, \".txt\")\n\nfor(t in 1:nrow(Schedule)){\n    HomeTeam <- as.character(NBATeamName[Team_Name==Schedule$Home_Team[t], Team_Short_Name])\n    AwayTeam <- as.character(NBATeamName[Team_Name==Schedule$Away_Team[t], Team_Short_Name])\n    MergeSeason <- sort(seq(SeasonCurrent-3, SeasonCurrent), decreasing = TRUE)\n    \n    ## function for loading team data\n    load.team.data <- function(Team.Name, MergeSeason) {\n      i <- 1\n      TeamData <- data.frame() \n      while(i<(length(MergeSeason)+1)){\n        if(Team.Name==\"BRK\" &&  MergeSeason[i]<2013) {\n          Team.Name <- \"NJN\"\n        }else if(Team.Name==\"NOP\" &&  MergeSeason[i]<2014) {\n          Team.Name <- \"NOH\"\n        }else if(Team.Name==\"CHO\" &&  MergeSeason[i]<2015) {\n          Team.Name <- \"CHA\"\n        }\n        MergeTeamdata <- read.table(sprintf(\"~/Documents/Sport_analysis/basketball//Team_Data//%s//%s_%s.txt\", \n                                           MergeSeason[i], Team.Name, MergeSeason[i]), header = TRUE, sep = \"\\t\", as.is = TRUE, dec = \".\")\n        TeamData <- rbind(TeamData, MergeTeamdata)\n        i <- i+1\n      } \n      return(TeamData)\n    }\n    ## call load.team.data function\n    GameDateTime <- unlist(Schedule$CovertDate[t])\n    HomeData <- load.team.data(HomeTeam, MergeSeason)\n    HomeData <- HomeData[order(HomeData$Date), ]\n    HomeTeamGamePlayed <- sum(ifelse(HomeData[which(HomeData$Season == SeasonCurrent & HomeData$H.A == \"H\"), \"Date\"] <= GameDateTime, 1, 0)) \n        \n    AwayData <- load.team.data(AwayTeam, MergeSeason)\n    AwayData <- AwayData[order(AwayData$Date), ]\n    AwayTeamGamePlayed <- sum(ifelse(AwayData[which(AwayData$Season == SeasonCurrent & AwayData$H.A == \"A\"), \"Date\"] <= GameDateTime, 1, 0)) \n    \nif(HomeTeamGamePlayed > 5 & AwayTeamGamePlayed >5){\n    \n    GameIndexHome <- which(HomeData$Date == GameDateTime)\n    HomeData <- HomeData[1:(GameIndexHome-1), ]\n    GameIndexAway <- which(AwayData$Date == GameDateTime)\n    AwayData <- AwayData[1:(GameIndexAway-1), ]\n    \n    ### Team Data convert & separate data set\n    ## function for convert to different data set \n    transfor.data <- function(TeamData ,SeasonCurrent) {\n      TeamData <- Advanced_Statistic(TeamData)\n      TeamData <- Normalize(TeamData)\n      TeamDataHome <- data.frame(subset(TeamData, H.A == \"H\"))  ## Home team data since three season ago \n      rownames(TeamDataHome) <- c(1:nrow(TeamDataHome))\n      TeamDataAway=data.frame(subset(TeamData, H.A == \"A\"))\n      rownames(TeamDataAway) <- c(1:nrow(TeamDataAway))\n      TeamDataSeason <- data.frame(subset(TeamData, Season == SeasonCurrent))  ## Home team data of current Season\n      rownames(TeamDataSeason) <- c(1:nrow(TeamDataSeason))\n      TeamDataSeasonHome <- data.frame(subset(TeamDataSeason, H.A == \"H\"))\n      TeamDataSeasonAway <- data.frame(subset(TeamDataSeason, H.A == \"A\"))\n      result <- list(TeamData = TeamData, TeamDataHome = TeamDataHome, TeamDataAway = TeamDataAway, \n                     TeamDataSeason = TeamDataSeason, TeamDataSeasonHome = TeamDataSeasonHome, TeamDataSeasonAway = TeamDataSeasonAway)\n      return(result)\n    }\n    ## call transfor.data function\n    AllDataHome <- transfor.data(HomeData, SeasonCurrent)\n    AllDataAway <- transfor.data(AwayData, SeasonCurrent)\n  \n    ### Model building use machine learning method\n    ## 1.adaboost method \n    if (!require(ada)) install.packages(\"ada\")\n    TotalGameHome <- nrow(AllDataHome$TeamDataHome) ## Game number of HomeData.H\n    SeasonGameHome <- nrow(AllDataHome$TeamDataSeasonHome) ## Game number of HomeData_Season.H\n    PredictGameHome <- SeasonGameHome-5 ## Game number for predict model\n    PredictNextGameHome <- data.frame()\n    \n    TotalGameAway <- nrow(AllDataAway$TeamDataAway) ## Game number of HomeData.A\n    SeasonGameAway <- nrow(AllDataAway$TeamDataSeasonAway) ## Game number of HomeData_Season.A\n    PredictGameAway <- SeasonGameAway-5 ## Game number for predict model\n    PredictNextGameAway <- data.frame()\n    \n    ### Prediction data of mean strategy\n    ## function for preparing prediction data\n    pred.data <- function(TeamData , CurrentSeasonGame) {\n      # PredictData(data, frist.game.no, final.game.no)\n      PredMeanData <- PredictData(TeamData, 1, CurrentSeasonGame) # mean strategy\n      if(CurrentSeasonGame-4 >0){\n        PredFiveData <- PredictData(TeamData, CurrentSeasonGame-4, CurrentSeasonGame) # previous five game strategy\n      }else{\n        PredFiveData <- PredictData(TeamData, 1, CurrentSeasonGame) # previous five game strategy\n      }\n      PredThreeData <- PredictData(TeamData, CurrentSeasonGame-2, CurrentSeasonGame)\n      return(list(MeanData = PredMeanData, FiveData = PredFiveData, ThreeData = PredThreeData))\n    }\n    PredDataHome <- pred.data(AllDataHome$TeamDataSeasonHome, SeasonGameHome)\n    PredDataAway <- pred.data(AllDataAway$TeamDataSeasonAway, SeasonGameAway)\n\n    ### Model building\n    iternumber <- 50 # defult=50\n    model.formula <- as.formula(\"W.L ~ diffEFG + diffTOV + diffRB + diffFTR\")\n    \n    ## 1. buliding adaboost model for real, discrete, gentle three different type method\n    ml.adaboost <- function(model.formula, train.data, iternumber, nu) {\n      ML.ada.real <- ada(model.formula, data = train.data, loss = c(\"logistic\"), iter = iternumber, nu = nu, type = \"real\")\n      ML.ada.discrete <- ada(model.formula, data = train.data, loss = c(\"logistic\"), iter = iternumber, nu = nu, type = \"discrete\")\n      ML.ada.gentle <- ada(model.formula, data = train.data, loss = c(\"logistic\"), iter = iternumber, nu = nu, type = \"gentle\")\n      return(list(real = ML.ada.real, discrete = ML.ada.discrete, gentle = ML.ada.gentle))\n    }\n    ## call ml.adaboost function\n    MLAdaboostModelHome <- ml.adaboost(model.formula, AllDataHome$TeamDataHome, 50, 0.1)\n    MLAdaboostModelAway <- ml.adaboost(model.formula, AllDataAway$TeamDataAway, 50, 0.1)\n    \n    ## predict game win or loss--Home team  \n    PredictGameMeanHome <- predict(MLAdaboostModelHome$real, PredDataHome$MeanData, 41, type = c(\"both\"))\n    PredictGameFiveHome <- predict(MLAdaboostModelHome$real, PredDataHome$FiveData, 41, type = c(\"both\"))\n    PredictGameThreeHome <- predict(MLAdaboostModelHome$real, PredDataHome$ThreeData, 41, type = c(\"both\"))\n    \n    ## record model's predict percentage\n    PredictNextGameHome[\"Probability\", \"AdaMeanHome\"] <- round(table(PredictGameMeanHome$class)[\"W\"]/sum(table(PredictGameMeanHome$class)), 4)\n    PredictNextGameHome[\"Probability\", \"AdaFiveHome\"] <- round(table(PredictGameFiveHome$class)[\"W\"]/sum(table(PredictGameFiveHome$class)), 4)\n    PredictNextGameHome[\"Probability\", \"AdaThreeHome\"] <- round(table(PredictGameThreeHome$class)[\"W\"]/sum(table(PredictGameThreeHome$class)), 4)\n    \n    ## predict game win or loss--Away team \n    PredictGameMeanAway <- predict(MLAdaboostModelAway$real, PredDataAway$MeanData, 41, type = c(\"both\"))\n    PredictGameFiveAway <- predict(MLAdaboostModelAway$real, PredDataAway$FiveData, 41, type = c(\"both\"))\n    PredictGameThreeAway <- predict(MLAdaboostModelAway$real, PredDataAway$ThreeData, 41, type = c(\"both\"))\n    \n    ## record model's predict percentage\n    PredictNextGameAway[\"Probability\", \"AdaMeanAway\"] <- round(table(PredictGameMeanAway$class)[\"W\"]/sum(table(PredictGameMeanAway$class)), 4)\n    PredictNextGameAway[\"Probability\", \"AdaFiveAway\"] <- round(table(PredictGameFiveAway$class)[\"W\"]/sum(table(PredictGameFiveAway$class)), 4)\n    PredictNextGameAway[\"Probability\", \"AdaThreeAway\"] <- round(table(PredictGameThreeAway$class)[\"W\"]/sum(table(PredictGameThreeAway$class)), 4)\n    \n    ### 2. svm method\n    require(kernlab)\n    ml.svm.model <- function(train.data, pred.data, c.parameter = 2, cross.parameter = 10){\n      ML.ksvm <- ksvm(W.L ~ diffEFG + diffTOV + diffRB + diffFTR, data = train.data, kernel = \"rbfdot\", \n                      C = c.parameter, cross = cross.parameter, prob.model = TRUE)\n      pred.ksvm <- predict(ML.ksvm, pred.data, type = \"probabilities\")\n      return(pred.ksvm)\n    }\n    \n    ### call ml.svm.model function and svm pred--Home team\n    PredictNextGameHome[\"Probability\", \"SvmMeanHome\"] <- round(ml.svm.model(AllDataHome$TeamDataHome, PredDataHome$MeanData)[, \"W\"], 4)\n    PredictNextGameHome[\"Probability\", \"SvmFiveHome\"]<- round(ml.svm.model(AllDataHome$TeamDataHome, PredDataHome$FiveData)[, \"W\"], 4)\n    PredictNextGameHome[\"Probability\", \"SvmThreeHome\"]<- round(ml.svm.model(AllDataHome$TeamDataHome, PredDataHome$ThreeData)[, \"W\"], 4)\n    \n    ### call ml.svm.model function and svm pred--Away team\n    PredictNextGameAway[\"Probability\", \"SvmMeanAway\"] <- round(ml.svm.model(AllDataAway$TeamDataAway, PredDataAway$MeanData)[, \"W\"], 4)\n    PredictNextGameAway[\"Probability\", \"SvmFiveAway\"]<- round(ml.svm.model(AllDataAway$TeamDataAway, PredDataAway$FiveData)[, \"W\"], 4)\n    PredictNextGameAway[\"Probability\", \"SvmThreeAway\"]<- round(ml.svm.model(AllDataAway$TeamDataAway, PredDataAway$ThreeData)[, \"W\"], 4)\n    \n    ### 3. randomForest \n    #library(randomForest)\n    #ML.RF <- randomForest(as.factor(W.L) ~ diffEFG + diffTOV + diffRB + diffFTR, \n    #                      data = AllDataHome$TeamDataHome[, c(\"W.L\", \"diffEFG\", \"diffTOV\", \"diffRB\", \"diffFTR\")],\n    #                      mtry = 2, importance = TRUE, proximity=TRUE)  \n    #pred.RF <- predict(ML.RF, test.data) \n    #pred.RF.error.rate<- 1-round(sum(diag(table(pred.RF, test.data$W.L)))/sum(table(pred.RF, test.data$W.L)), 4)\n    \n    ### Split different day for rest\n    CurrentSeasonGameHome <- nrow(AllDataHome$TeamDataSeason)\n    CurrentSeasonGameAway <- nrow(AllDataAway$TeamDataSeason)\n    \n    ##  function for calculate the rest of different day\n    game.date.diff <- function(GameData, GameNumber) {\n      DateDiff<- data.frame()\n      for(d in 2:(GameNumber+1)) {\n        first.game <- as.Date(GameData$Date[d-1])\n        second.game <- as.Date(GameData$Date[d])\n        DateDiff[d-1, \"Date\"] <- GameData$Date[d-1]\n        DateDiff[1, \"DayDiff\"] <- -1\n        DateDiff[d, \"DayDiff\"] <- as.numeric(-(first.game - second.game))\n        DateDiff[d-1, \"W.L\"] <- GameData$W.L[d-1]\n        DateDiff[d-1, \"H.A\"] <- GameData$H.A[d-1]\n        DateDiff[d-1, \"Opp\"] <- GameData$Opp[d-1]\n      }\n      return(DateDiff)\n    }\n    # call game.date.diff function\n    DiffGameRestHome <- na.omit(game.date.diff(AllDataHome$TeamDataSeason, CurrentSeasonGameHome))\n    DiffGameRestTableHome <- table(DiffGameRestHome[, 2:3])\n    DiffGameRestAway <- na.omit(game.date.diff(AllDataAway$TeamDataSeason, CurrentSeasonGameAway))\n    DiffGameRestTableAway <- table(DiffGameRestAway[, 2:3])\n    \n    ### Win percent different day for rest\n    ## function for calculate the win percentage about rest day\n    # GameDateTime <- Sys.Date() # the correct game time in American\n    # previous.day.H <- AllDataHome$TeamDataSeason$Date[nrow(AllDataHome$TeamDataSeason)] \n    # game.date.idx.H<- which(AllDataHome$TeamDataSeason$Date == previous.day.H)\n    \n    ## previous game date by Hoem team\n    GameRestDayHome <- as.numeric(as.Date(GameDateTime) - as.Date(AllDataHome$TeamDataSeason$Date[nrow(AllDataHome$TeamDataSeason)])) \n    ## previous game date by Away team\n    GameRestDayAway <- as.numeric(as.Date(GameDateTime) - as.Date(AllDataAway$TeamDataSeason$Date[nrow(AllDataAway$TeamDataSeason)])) \n    \n    ## function for calculate the rest of different day win percentage\n    diff.day.wp <- function(GameRestData, DiffDayNumber) {\n           if(sum(GameRestData[1:nrow(GameRestData), \"DayDiff\"] == DiffDayNumber) == 0){ \n             WP <- 0.1\n           }else if(sum(GameRestData[1:nrow(GameRestData), \"W.L\"] == \"W\") == 0){\n             WP <- 0.1\n           }else{ \n             WP <- table(GameRestData[1:nrow(GameRestData), c(\"DayDiff\", \"W.L\")])[as.character(DiffDayNumber), \"W\"] / \n                   sum(table(GameRestData[1:nrow(GameRestData), c(\"DayDiff\", \"W.L\")])[as.character(DiffDayNumber), ]) \n             if(WP == 0){\n               WP = 0.1\n             }\n           }\n      return(round(WP, 4))\n    }\n    # call diff.day.wp function\n    PredictNextGameHome[\"Probability\", \"GameRestDayWPHome\"] <- diff.day.wp(DiffGameRestHome, GameRestDayHome)\n    PredictNextGameAway[\"Probability\", \"GameRestDayWPAway\"] <- diff.day.wp(DiffGameRestAway, GameRestDayAway)\n    \n    ### Current season win percentage\n    if( length(which(AllDataAway$TeamDataSeasonHome$W.L == \"W\")) !=0  ) {\n      PredictNextGameHome[\"Probability\", \"CurrentSeasonWPHome\"] <- round( table(AllDataHome$TeamDataSeasonHome$W.L)[\"W\"] / \n                                                                            sum(table(AllDataHome$TeamDataSeasonHome$W.L)), 4 )\n    }else{\n      PredictNextGameHome[\"Probability\", \"CurrentSeasonWPHome\"] <- 0.1\n    }\n    if( length(which(AllDataAway$TeamDataSeasonAway$W.L == \"W\")) !=0 ) {\n      PredictNextGameAway[\"Probability\", \"CurrentSeasonWPAway\"] <- round( table(AllDataAway$TeamDataSeasonAway$W.L)[\"W\"] / \n                                                                            sum(table(AllDataAway$TeamDataSeasonAway$W.L)), 4 )    \n    }else{\n      PredictNextGameAway[\"Probability\", \"CurrentSeasonWPAway\"] <- 0.1\n    }\n  \n    ### Game win percentage with opponent ago\n    ## function for calculate the game win precentage with opponent ago \n    wp.with.opponent <- function(TeamData, OpponentTeamName) {\n      if(OpponentTeamName == \"BRK\") {\n        opp.data.first <- data.frame(subset(TeamData, Opp == OpponentTeamName))\n        opp.data.second <- data.frame(subset(TeamData, Opp == \"NJN\"))\n        opp.data <- rbind(opp.data.first, opp.data.second)\n        if(is.na(table(opp.data$W.L)[\"W\"])) {\n          wp <- 0.01\n        }else{\n          wp <- round(table(opp.data$W.L)[\"W\"] / sum(table(opp.data$W.L)), 4)\n        }\n      }else if(OpponentTeamName == \"NOP\") {\n        opp.data.first <- data.frame(subset(TeamData, Opp == OpponentTeamName))\n        opp.data.second <- data.frame(subset(TeamData, Opp == \"NOH\"))\n        opp.data <- rbind(opp.data.first, opp.data.second)\n        if(is.na(table(opp.data$W.L)[\"W\"])) {\n          wp <- 0.01\n        }else{\n          wp <- round(table(opp.data$W.L)[\"W\"] / sum(table(opp.data$W.L)), 4)\n        }\n      }else if(OpponentTeamName == \"CHO\") {\n        opp.data.first <- data.frame(subset(TeamData, Opp == OpponentTeamName))\n        opp.data.second <- data.frame(subset(TeamData, Opp == \"CHA\"))\n        opp.data <- rbind(opp.data.first, opp.data.second)\n        if(is.na(table(opp.data$W.L)[\"W\"])) {\n          wp <- 0.01\n        }else{\n          wp <- round(table(opp.data$W.L)[\"W\"] / sum(table(opp.data$W.L)), 4)\n        }\n      }else{\n        opp.data <- data.frame(subset(TeamData, Opp == OpponentTeamName))\n        if(is.na(table(opp.data$W.L)[\"W\"])) {\n          wp <- 0.01\n        }else{\n          wp <- round(table(opp.data$W.L)[\"W\"] / sum(table(opp.data$W.L)), 4)\n        }\n      }\n      return(wp)\n    }\n    # call wp.with.opponent function\n    PredictNextGameHome[\"Probability\", \"OpponentWPHome\"] <- round(wp.with.opponent(AllDataHome$TeamDataHome, AwayTeam), 4)\n    PredictNextGameAway[\"Probability\", \"OpponentWPAway\"] <- round(wp.with.opponent(AllDataAway$TeamDataAway, HomeTeam), 4)\n    \n    RecordWinPAndPred <- data.frame(Schedule[t,], GameDate = GameDateTime, AwayTeam = AwayTeam, HomeTeam = HomeTeam,\n                                    PredictNextGameAway, PredictNextGameHome)\n    RecordGameInfo <- rbind(RecordGameInfo, RecordWinPAndPred)\n    print(c(t))\n  }else{\n    print(t)\n    next()\n  }\n}\n\nwrite.table(RecordGameInfo, sprintf(\"~/Documents/Sport_analysis/basketball//Pred_Data//RecordGameInfo_%s.txt\", SeasonCurrent), \n          col.names = TRUE, row.names = FALSE, sep = \"\\t\")\n\nSys.setlocale(\"LC_TIME\", \"\")\n\n\n",
    "created" : 1430758767437.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1982900455",
    "id" : "D59D499",
    "lastKnownWriteTime" : 1430758866,
    "path" : "~/Documents/Sport_analysis/basketball/NBA_Prediction_Analysis/NBA_Team_Data_Transfer.R",
    "project_path" : "NBA_Team_Data_Transfer.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}