{
    "contents" : "##--------------------------------------Machine Learning and model testing--------------------------------------##\n##----------------------load the package----------------------##\nsource(\"~/Documents/Sport_analysis/basketball/NBA_Prediction_Analysis//Setting_Packages.R\")\nsource(\"~/Documents/Sport_analysis/basketball/NBA_Prediction_Analysis//Setting_Advanced_Statistic.R\")\nsource(\"~/Documents/Sport_analysis/basketball/NBA_Prediction_Analysis//Setting_Normalize.R\")\nsource(\"~/Documents/Sport_analysis/basketball/NBA_Prediction_Analysis//Setting_Predict_Data.R\")\n\n##----------------------Current Season----------------------##\nif(format(Sys.time(), \"%Y %m\")<paste(as.numeric(format(Sys.time(), \"%Y\")), \"11\") &\n     format(Sys.time(), \"%Y %m\")>paste(as.numeric(format(Sys.time(), \"%Y\")), \"05\") ){\n  Season_Current <- as.numeric(format(Sys.time(), \"%Y\"))-1\n}else{\n  Season_Current <- as.numeric(format(Sys.time(), \"%Y\"))\n}\n\n##----------------------NBA_Team_Name----------------------##\nNBA_Team_Name <- read.xlsx(\"~/Documents/Sport_analysis/basketball//Team_Data//NBA_Team_Name.xlsx\",                           \n                           sheetIndex = as.character(Season_Current), header = TRUE) # load Team Name data\nNBA_Team_Name <- data.table(NBA_Team_Name) # convert to data.table\ncalculate.df <- data.frame()  # record all of ML model's result\nfor(t in 1:nrow(NBA_Team_Name)) {\n  Team.Name.pick <- as.character(NBA_Team_Name$Team_Short_Name[t])  # All of Team Name \n  merge.season <- sort(seq(Season_Current-3, Season_Current), decreasing = TRUE)  # passed three season and incloud current season\n  # function for load team data\n  load.team.data <- function(Team.Name, merge.season) {\n    i <- 1\n    Team.data <- data.frame() \n    while(i<5){\n      if(Team.Name==\"BRK\" &&  merge.season[i]<2013) {\n        Team.Name <- \"NJN\"   # merge NJN data to BRK data\n      }else if(Team.Name==\"NOP\" &&  merge.season[i]<2014) {\n        Team.Name <- \"NOH\"   # merge NOH data to NOP data\n      }else if(Team.Name==\"CHO\" &&  merge.season[i]<2015) {\n        Team.Name <- \"CHA\"   # merge CHA data to CHO data\n      }\n      Merge.Team.data <- read.table(sprintf(\"~/Documents/Sport_analysis/basketball//Team_Data//%d//%s_%d.txt\", \n                                         merge.season[i], Team.Name, merge.season[i]), header = TRUE, sep = \"\\t\", as.is = TRUE, dec = \".\")\n      Team.data <- rbind(Team.data, Merge.Team.data)  # load the team data\n      i <- i+1\n    } \n    return(Team.data)\n  }\n  # calculate\n  Team.Data.Set <- load.team.data(Team.Name.pick, merge.season) # load the team data\n  Team.Data.Set <- Team.Data.Set[order(Team.Data.Set$Date), ] # sort data's date\n  \n  ##----------------------Team Data Transfer & deal---------------------##\n  # function for transfor to different data set \n  transfor.data <- function(team.data ,Season_Current) {\n    team.data <- Advanced_Statistic(team.data)\n    team.data <- Normalize(team.data)\n    team.data.H <- data.frame(subset(team.data, H.A == \"H\"))  ## Home team data since three season ago \n    rownames(team.data.H) <- c(1:nrow(team.data.H))\n    team.data.A=data.frame(subset(team.data, H.A == \"A\"))\n    rownames(team.data.A) <- c(1:nrow(team.data.A))\n    team.data.season <- data.frame(subset(team.data, Season == Season_Current))  ## Home team data of current Season\n    rownames(team.data.season) <- c(1:nrow(team.data.season))\n    team.data.season.H <- data.frame(subset(team.data.season, H.A == \"H\"))\n    team.data.season.A <- data.frame(subset(team.data.season, H.A == \"A\"))\n    result <- list(team.data = team.data, team.data.H = team.data.H, team.data.A = team.data.A, \n                   team.data.season = team.data.season, team.data.season.H = team.data.season.H, team.data.season.A = team.data.season.A)\n    return(result)\n  }\n  Team.Data.Set <- transfor.data(Team.Data.Set, Season_Current)  # separate different type data\n  \n  # function \n  Game.Data.location<- function(team.data, location, Season_Current) {\n    game.data <- data.frame(subset(team.data, H.A == as.character(location)))\n    length.game <- nrow(game.data)\n    length.season <- length(which(game.data$Season == Season_Current))\n    return(list(Game.Data = game.data, length.game = length.game, length.season = length.season))\n  }\n  # function for prepare prediction data\n  pred.data <- function(team.data, current.season.game, current.season.game.fnail) {\n    # PredictData(data, frist.game.no, final.game.no)\n    pred.Mean.Data <- PredictData(team.data, current.season.game, current.season.game.fnail) # mean strategy\n    Pred.Five.Data <- PredictData(team.data, current.season.game.fnail-4, current.season.game.fnail) # previous five game strategy\n    return(list(mean.data = pred.Mean.Data, five.data = Pred.Five.Data))\n  }\n  location = c(\"H\", \"A\")\n  for(l in location) {\n    # Team data set\n    Game.Data <- Game.Data.location(Team.Data.Set$team.data, as.character(l), Season_Current)\n   for(i in 5:Game.DataSet$length.season) {\n    # prediction data set\n    Pred.data<- pred.data(Game.Data$Game.Data, Game.Data$length.game-Game.Data$length.season+1, (Game.Data$length.game-Game.Data$length.season)+i)\n    ##----------------------Machine Learning method---------------------##\n    model.formula <- as.formula(\"W.L ~ diffEFG + diffTOV + diffRB + diffFTR\")\n    train.data <- Game.Data$Game.Data[1:(Game.Data$length.game-Game.Data$length.season+5), ]\n    train.idx <- sample(1:(Game.Data$length.game-Game.Data$length.season+5), 1000, replace = TRUE)\n    train.data2 <- Game.Data$Game.Data[train.idx, ]\n    test.data <- Game.Data$Game.Data[(Game.Data$length.game-Game.Data$length.season+6):(Game.Data$length.game-Game.Data$length.season+41), ]\n    # adaboost\n    iternumber <- 100 # defult=50\n    ML.adaboost <- ada(model.formula, data = train.data, \n                       test.x = test.data[, c(\"diffEFG\", \"diffTOV\", \"diffRB\", \"diffFTR\")],\n                       test.y = test.data[, \"W.L\"],\n                       loss = c(\"logistic\"), iter = iternumber, nu = 0.1, type = \"real\",\n                       control = rpart.control()) # nu:slow down learning for allowing to dramatically reduce overfitting.\n    #plot(ML.adaboost, kappa = FALSE , test = TRUE)\n    #varplot(ML.adaboost)\n    pred.adaboost <- predict(ML.adaboost, test.data, type = c(\"vector\"))\n    ada.error.rate <- 1-round(sum(diag(table(pred.adaboost, test.data$W.L)))/sum(table(pred.adaboost, test.data$W.L)), 4)\n    \n    # bayes belive network\n    # ANN - Artificial Neural Network - \"response variable must be a binary classification\"\n    require(neuralnet)\n    train.data2$W.L.Convert <- with(train.data2, ifelse(W.L == \"W\", 1, 0)) \n    ML.nn <- neuralnet(\"W.L.Convert ~ diffEFG + diffTOV + diffRB + diffFTR\", data = train.data2, algorithm = \"backprop\",hidden = 6, \n                              err.fct = \"sse\", act.fct = \"logistic\", learningrate=0.5, linear.output=FALSE)\n    pred.nn <- compute(ML.nn, train.data[, c(\"diffEFG\", \"diffTOV\", \"diffRB\", \"diffFTR\")])\n    cor(train.data$W.L.Convert, pred.nn$net.result)\n    \n    \n    \n    # svm - \"dependent variable must be factor\"\n    require(e1071)\n    train.data$W.L <- as.factor(train.data$W.L)\n    ML.svm<- svm(model.formula, data = train.data, probability = TRUE, kernel = \"radial\" , cost = 2, cross = 10, gamma = 0.25)\n    pred.svm <- predict(ML.svm, test.data, type = \"class\")\n    svm.error.rate <- 1-round(sum(diag(table(pred.svm, test.data$W.L)))/sum(table(pred.svm, test.data$W.L)), 4)\n    #tune(svm, model.formula, data = train.data, ranges = list(gamma = 2^(-2:2), cost = 2^(0:10)), \n    #                       tunecontrol = tune.control(sampling = \"bootstrap\"))\n\n    require(kernlab)\n    ML.ksvm <- ksvm(W.L ~ diffEFG + diffTOV + diffRB + diffFTR, data = train.data, kernel = \"rbfdot\", C = 2, cross = 10)\n    pred.ksvm <- predict(ML.ksvm, test.data, type = \"response\")\n    ksvm.error.rate <- 1-round(sum(diag(table(pred.ksvm, test.data$W.L)))/sum(table(pred.ksvm, test.data$W.L)), 4)\n    \n    # decision tree : CART (Class and Regression Tree)\n    require(rpart)\n    #ML.rpart.fun <- function(model.formula, team.data){\n    #  ML.rpart.cart <- rpart(model.formula, data = team.data) \n    #  plot(ML.rpart, uniform = TRUE, compress = TRUE, lty = 3, branch = 0.7)\n    #  text(ML.rpart, all = TRUE, digits = 6, use.n = TRUE, splits = TRUE, cex = 0.9, xpd = TRUE)\n    #  return(ML.rpart.cart)\n    #}\n    ML.rpart <- rpart(model.formula, train.data, method = \"class\", control = rpart.control(minsplit = 10, xval = 10))\n    pred.rpart <- data.frame(predict(ML.rpart, test.data))\n    pred.rpart$label <- with(pred.rpart, ifelse(W>0.5, \"W\", \"L\"))\n    pred.rpart.error.rate <- 1-round(sum(diag(table(pred.rpart$label, test.data$W.L)))/sum(table(pred.rpart$label, test.data$W.L)), 4)\n    #tune.rpart(model.formula, train.data, minsplit = c(2:10), cp = c(0.1:0.5))\n    \n    # decision tree : C4.5\n    require(RWeka)\n    ML.C45 <- J48(model.formula, data = train.data, control = Weka_control(C = 0.25, M = 5))\n    pred.C45 <- predict(ML.C4.5, test.data)\n    pred.C45.error.rate <- 1-round(sum(diag(table(pred.C45, test.data$W.L)))/sum(table(pred.C45, test.data$W.L)), 4)\n    \n    #decision tree : C5.0\n    require(C50)\n    ML.C50 <- C5.0(train.data[, c(\"diffEFG\", \"diffTOV\", \"diffRB\", \"diffFTR\")], train.data[, \"W.L\"], trials = 10)\n    summary(ML.C50)\n    pred.C50 <- predict(ML.C50, test.data) \n    pred.C50.error.rate<- 1-round(sum(diag(table(pred.C50, test.data$W.L)))/sum(table(pred.C50, test.data$W.L)), 4)\n\n    # randomForest \n    library(randomForest)\n    ML.RF <- randomForest(model.formula, data = train.data, mtry = 2, ntree = 500, importance = TRUE, proximity=TRUE)\n    pred.RF <- predict(ML.RF, test.data) \n    pred.RF.error.rate<- 1-round(sum(diag(table(pred.RF, test.data$W.L)))/sum(table(pred.RF, test.data$W.L)), 4)\n    }\n  }\n}\n\n\n\n\n",
    "created" : 1430757970164.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3200584246",
    "id" : "3B64811F",
    "lastKnownWriteTime" : 1430758389,
    "path" : "~/Documents/Sport_analysis/basketball/NBA_Prediction_Analysis/Machine_Learning.R",
    "project_path" : "Machine_Learning.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}